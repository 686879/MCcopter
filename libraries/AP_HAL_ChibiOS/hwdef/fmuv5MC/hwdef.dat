# hw definition file for processing by chibios_hwdef.py
# for FMUv5 hardware (ie. for CUAV-PixHack-v5 and Pixhawk4)

# MCU class and specific type. It is a F765, which is the same as F767
# but without the TFT interface
MCU STM32H7xx STM32H743xx

# crystal frequency
OSCILLATOR_HZ 24000000

define CONFIG_HAL_BOARD_SUBTYPE HAL_BOARD_SUBTYPE_CHIBIOS_FMUV5
define HAL_CHIBIOS_ARCH_FMUV5 1

# board ID for firmware load
APJ_BOARD_ID 1045
# FLASH_RESERVE_START_KB 32 �����Ƿ�ҳ����
FLASH_RESERVE_START_KB 128


# flash size
FLASH_SIZE_KB 2048

env OPTIMIZE -O2

# order of UARTs (and USB)
# USB    GPS     ����1     ����2      ����4    DEBUG->5    IO�� 
# SERIAL_ORDER OTG1 USART2 USART3 USART1 UART4 USART6 UART7 OTG2
SERIAL_ORDER OTG1 USART1 USART2 USART3 UART4 UART7 USART6 OTG2

# default the 2nd interface to MAVLink2 until MissionPlanner updates drivers
define HAL_OTG2_PROTOCOL SerialProtocol_MAVLink2

# now we define the pins that USB is connected on
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# these are the pins for SWD debugging with a STlinkv2 or black-magic probe
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# SPI1 - internal sensors
PA5 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PA7 SPI1_MOSI SPI1

# SPI2 - FRAM
PD3 SPI2_SCK SPI2
PB14 SPI2_MISO SPI2
PB15 SPI2_MOSI SPI2

# SPI4 - sensors2
PE2 SPI4_SCK SPI4
PE5 SPI4_MISO SPI4
PE6 SPI4_MOSI SPI4



# sensor CS
PE3   MS5611_CS CS
PC15  ICM20689_CS CS SPEED_VERYLOW
PC1   ICM20602_CS CS SPEED_VERYLOW
PD11  BMI055_G_CS CS
PD15  BMI055_A_CS CS
PD10  FRAM_CS CS SPEED_VERYLOW
PE4   EXTERNAL1_CS1 CS

# I2C buses

PB8 I2C1_SCL I2C1
PB9 I2C1_SDA I2C1

PB10 I2C2_SCL I2C2
PB11 I2C2_SDA I2C2


# order of I2C buses
I2C_ORDER I2C1 I2C2


# enable pins
#PE3 VDD_3V3_SENSORS_EN OUTPUT HIGH

# start peripheral power off, then enable after init
# this prevents a problem with radios that use RTS for
# bootloader hold
#PF12 nVDD_5V_HIPOWER_EN OUTPUT HIGH
#PG4  nVDD_5V_PERIPH_EN OUTPUT HIGH

#PG5  VDD_5V_RC_EN OUTPUT HIGH
#PG6  VDD_5V_WIFI_EN OUTPUT HIGH
#PG7  VDD_3V3_SD_CARD_EN OUTPUT HIGH

# drdy pins
PC13  DRDY1_ICM20689 INPUT
PB1   DRDY2_BMI055_GYRO INPUT
PA10  DRDY3_BMI055_ACC INPUT
PC2   DRDY4_ICM20602 INPUT
PC5   DRDY5_BMI055_GYRO INPUT
PB0   DRDY6_BMI055_ACC INPUT
PC14  DRDY7_EXTERNAL1 INPUT GPIO(93)

# Control of Spektrum power pin
#PE4 SPEKTRUM_PWR OUTPUT HIGH GPIO(73)
#define HAL_GPIO_SPEKTRUM_PWR 73

# Spektrum Power is Active High
# define HAL_SPEKTRUM_PWR_ENABLED 1

# UARTs

# USART1 is  GPS1
PB7 USART1_RX USART1 NODMA
PB6 USART1_TX USART1 NODMA

# USART2 is telem1
PD6 USART2_RX USART2
PD5 USART2_TX USART2

# USART3 is  telem2
PD9 USART3_RX USART3
PD8 USART3_TX USART3


# UART4 GPS2
PA1 UART4_RX UART4 NODMA
PA0 UART4_TX UART4 NODMA

# USART6 is is for IOMCU
# we leave PG14 as an input to prevent it acting as a pullup
# on the IOMCU SBUS input
PC7 USART6_RX USART6 NODMA
PC6 USART6_TX USART6 NODMA


# UART7 is debug
PE7 UART7_RX UART7 NODMA
PE8 UART7_TX UART7 NODMA

# UART8 is for IOMCU
PE0 UART8_RX UART8
PE1 UART8_TX UART8

# UART for IOMCU
IOMCU_UART UART8

# PWM AUX channels
PE14 TIM1_CH4 TIM1 PWM(1) GPIO(50)
PE13 TIM1_CH3 TIM1 PWM(2) GPIO(51)
PE11 TIM1_CH2 TIM1 PWM(3) GPIO(52)
PE9  TIM1_CH1 TIM1 PWM(4) GPIO(53)
PD13 TIM4_CH2 TIM4 PWM(5) GPIO(54)
PD14 TIM4_CH3 TIM4 PWM(6) GPIO(55)


# PWM output for buzzer
PB4 TIM3_CH1 TIM3 GPIO(77) ALARM

# analog in
PA2 BATT_VOLTAGE_SENS ADC1 SCALE(1)
PA3 BATT_CURRENT_SENS ADC1 SCALE(1)

PC3 SPARE1_ADC1 ADC1 SCALE(1)
PC4 SPARE2_ADC1 ADC1 SCALE(1)


#PC3 HW_REV_SENS ADC1 SCALE(1)
#PC2 HW_VER_SENS ADC1 SCALE(1)

PA4 VDD_5V_SENS ADC1 SCALE(2)

# setup scaling defaults for PixHackV5 power brick
define HAL_BATT_VOLT_SCALE 18.0
define HAL_BATT_CURR_SCALE 24.0
define HAL_BATT_VOLT_PIN 0
define HAL_BATT_CURR_PIN 1
define HAL_BATT2_VOLT_PIN 2
define HAL_BATT2_CURR_PIN 3

# CAN bus
PD0  CAN1_RX CAN1
PD1  CAN1_TX CAN1

PB12 CAN2_RX CAN2
PB13 CAN2_TX CAN2


# GPIOs
PA8 VDD_5V_PERIPH_EN OUTPUT LOW 


PB5 VDD_BRICK_nVALID INPUT PULLUP
PD4 VDD_BRICK2_nVALID INPUT PULLUP
PE10 VDD_5V_HIPOWER_nOC INPUT PULLUP
PE15 VDD_5V_PERIPH_nOC INPUT PULLUP

# capture pins
PH0 FMU_CAP1 INPUT  GPIO(58)
PD7 FMU_CAP2 INPUT  GPIO(59)
PH1 FMU_CAP3 INPUT GPIO(60)
#PI0 FMU_SPARE_4 INPUT GPIO(61)

# SPI devices
SPIDEV ms5611         SPI4 DEVID1  MS5611_CS    MODE3 20*MHZ 20*MHZ
SPIDEV icm20689       SPI1 DEVID1  ICM20689_CS  MODE3  2*MHZ  8*MHZ
SPIDEV icm20602       SPI1 DEVID2  ICM20602_CS  MODE3  2*MHZ  8*MHZ
SPIDEV bmi055_g       SPI1 DEVID3  BMI055_G_CS  MODE3 10*MHZ 10*MHZ
SPIDEV bmi055_a       SPI1 DEVID4  BMI055_A_CS  MODE3 10*MHZ 10*MHZ
SPIDEV ramtron        SPI2 DEVID1  FRAM_CS      MODE3  8*MHZ  8*MHZ 
SPIDEV adis1647x      SPI4 DEVID2  EXTERNAL1_CS1 MODE3  2*MHZ  2*MHZ 
# up to 3 IMUs
IMU Invensense SPI:icm20689 ROTATION_NONE
IMU Invensense SPI:icm20602 ROTATION_NONE
IMU ADIS1647x SPI:adis1647x ROTATION_NONE 93
# 3rd could be BMMI055 or BMI088
#IMU BMI055 SPI:bmi055_a SPI:bmi055_g ROTATION_ROLL_180_YAW_90
#IMU BMI088 SPI:bmi055_a SPI:bmi055_g ROTATION_ROLL_180_YAW_90

define HAL_DEFAULT_INS_FAST_SAMPLE 1

# probe external I2C compasses plus some internal IST8310
# we also probe some external IST8310 with a non-standard orientation
define HAL_PROBE_EXTERNAL_I2C_COMPASSES
# COMPASS IST8310 I2C:ALL_EXTERNAL:0x0E false  ROTATION_ROLL_180_YAW_90
# COMPASS IST8310 I2C:ALL_INTERNAL:0x0E true   ROTATION_ROLL_180_YAW_90

COMPASS IST8310 I2C:ALL_EXTERNAL:0x0C false  ROTATION_ROLL_180_YAW_90
COMPASS IST8310 I2C:ALL_INTERNAL:0x0C true  ROTATION_ROLL_180_YAW_90

# one baro
BARO MS56XX SPI:ms5611

# microSD support
PC8 SDMMC1_D0 SDMMC1
PC9 SDMMC1_D1 SDMMC1
PC10 SDMMC1_D2 SDMMC1
PC11 SDMMC1_D3 SDMMC1
PC12 SDMMC1_CK SDMMC1
PD2 SDMMC1_CMD SDMMC1

# red LED marked as B/E
PE12 LED_RED OUTPUT OPENDRAIN GPIO(90)

# green LED marked as PWR. We leave this solid on, but allow
# for it to be controlled as a relay if needed
PA15 LED_GREEN OUTPUT GPIO(91) LOW

# blue LED marked as ACT
PB3 LED_BLUE OUTPUT GPIO(92) HIGH

# setup for BoardLED2
define HAL_GPIO_A_LED_PIN 90
define HAL_GPIO_B_LED_PIN 92
define HAL_GPIO_LED_ON 0


# enable RAMTROM parameter storage 16384����>16M; 32768����>32M
define HAL_STORAGE_SIZE 32768
define HAL_WITH_RAMTRON 1

# allow to have have a dedicated safety switch pin
define HAL_HAVE_SAFETY_SWITCH 1

define HAL_COMPASS_AUTO_ROT_DEFAULT 2

DMA_PRIORITY SDMMC* UART8* ADC* SPI* TIM*

# define HAL_SPI_CHECK_CLOCK_FREQ 1

# enable FAT filesystem support (needs a microSD defined via SDMMC)
define HAL_OS_FATFS_IO 1
define HAL_STORAGE_DIRECTORY "/MengChuang"
define HAL_BOARD_LOG_DIRECTORY "/MengChuang/LOGS"
define HAL_BOARD_TERRAIN_DIRECTORY "/MengChuang/TERRAIN"
USB_STRING_SERIAL "MCconsole"

ROMFS io_firmware.bin Tools/IO_Firmware/iofirmware_lowpolh.bin

# uncomment block below to enable a 2nd MS5611 baro on SPI5
#PF7 SPI5_SCK SPI5
#PF8 SPI5_MISO SPI5
#PF9 SPI5_MOSI SPI5
#SPIDEV ms5611_spi5    SPI5 DEVID1  EXTERNAL1_CS1 MODE3 20*MHZ 20*MHZ
#undef PI10
#PI10 EXTERNAL1_CS2 OUTPUT LOW
#BARO MS56XX SPI:ms5611_spi5
